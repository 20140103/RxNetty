/*
 * Copyright (c) 2017 RxNetty Contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
plugins {
    id 'java'
    id 'ru.vyarus.animalsniffer' version '1.1.0'
    id 'me.tatarka.retrolambda' version '3.7.0'
    id 'nebula.rxjava-project' version '4.0.0'
}

description = 'RxNetty: Reactive Extensions for Netty'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

test {
    testLogging {
        events  "passed", "failed"
        showExceptions true
        exceptionFormat "full"
        maxGranularity 3
    }

    onOutput { descriptor, event ->
        if (event.message.contains("ResourceLeakDetector")) {
            logger.error("ERROR: Test: " + descriptor + " produced resource leak: " + event.message )
        }
    }
}

animalsniffer {
    sourceSets = [sourceSets.main]
}

retrolambda {
    javaVersion JavaVersion.VERSION_1_6
    defaultMethods true
}

dependencies {
    signature 'org.codehaus.mojo.signature:java16:1.1@signature'

    compile "io.reactivex.rxjava2:rxjava:${rxjava_version}"

	compile "io.netty:netty-handler:${netty_version}"
	compile "io.netty:netty-handler-proxy:${netty_version}"
	compile "io.netty:netty-codec-http:${netty_version}"
	compile "io.netty:netty-transport-native-epoll:${netty_version}"

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.assertj:assertj-core:3.6.1'
    testCompile 'com.fasterxml.jackson.core:jackson-databind:2.5.1'
}

// support for snapshot/final releases with the various branches RxJava uses
nebulaRelease {
    addReleaseBranchPattern(/\d+\.\d+\.\d+/)
    addReleaseBranchPattern('HEAD')
}

if (project.hasProperty('release.useLastTag')) {
    tasks.prepare.enabled = false
}
