package io.reactivex.netty.pipeline;

import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.util.ReferenceCountUtil;
import rx.subjects.PublishSubject;

/**
 * An adapter that converts a message generated by netty's pipeline to an Observable event. <br/>
 * This adapter always requires a {@link PublishSubject} because all read events on the channel are always multicast to
 * all subscribers. Although this can also be achieved by having multiple instances of this adapter in the pipeline,
 * that will be an overhead.
 *
 * @author Nitesh Kant
 */
public class ObservableAdapter extends ChannelInboundHandlerAdapter {

    @SuppressWarnings("rawtypes")
    /*Nullable*/ private PublishSubject bridgedObserver;

    void activate(@SuppressWarnings("rawtypes") PublishSubject bridgedObserver) {
        this.bridgedObserver = bridgedObserver;
    }

    @SuppressWarnings("unchecked")
    @Override
    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
        if (null != bridgedObserver) {
            try {
                bridgedObserver.onNext(msg);
            } finally {
                ReferenceCountUtil.release(msg);
            }
        }
    }

    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
        if (null != bridgedObserver) {
            bridgedObserver.onError(cause);
        }
    }

    @Override
    public void channelInactive(ChannelHandlerContext ctx) throws Exception {
        if (null != bridgedObserver) {
            bridgedObserver.onCompleted();
        }
    }
}
